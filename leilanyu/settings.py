#coding:utf-8
"""
Django settings for leilanyu project.

Generated by 'django-admin startproject' using Django 1.10.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import sys


try:
    from private_key import PRIVATE_JSON
except:
    print('私有，可以自己提供')
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
sys.path.insert(1, os.path.join(BASE_DIR, 'extra_apps'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'jfy0^m#y*0ti(y0u9e(pp_)*t+he3arzhm$5b$(wu@@=7h!%6d'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
if DEBUG:
    ALLOWED_HOSTS = []
else:
    ALLOWED_HOSTS = PRIVATE_JSON['ALLOWED_HOSTS']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'django.contrib.sites',
    # 'oauth2_provider',
    # 'social_django',
    # 'rest_framework_social_oauth2',
]

CUSTOM_APPS = [
    'users',
    'blog',
    'comments',
]

THIRD_PARTY_APPS = [
    "xadmin",
    "crispy_forms",
    "reversion",
    "rest_framework",
    "haystack",
    "captcha",
    "debug_toolbar",
]

INSTALLED_APPS += THIRD_PARTY_APPS + CUSTOM_APPS
# django_debugtools
INTERNAL_IPS = ('127.0.0.1', )
DEBUG_TOOLBAR_CONFIG = {'JQUERY_URL': r"/static/plugin/jquery/1.9.1/jquery.min.js"}

AUTH_USER_MODEL = 'users.User'

MIDDLEWARE = [
    'django.middleware.cache.UpdateCacheMiddleware',  # 缓存
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware', # django_debugtools
    'django.middleware.cache.FetchFromCacheMiddleware',  # 缓存
]

ROOT_URLCONF = 'leilanyu.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'users.views.template_variable',
                # 'social_django.context_processors.backends',
                # 'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'leilanyu.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': PRIVATE_JSON['DB_NAME'],
        'USER': PRIVATE_JSON['DB_USER'],
        'PASSWORD': PRIVATE_JSON['DB_PASSWORD'],
        'HOST': '127.0.0.1',
        # 'OPTIONS':{"init_command":"SET default_storage_engine=INNODB;"}

    }
}

DEFAULT_CACHE_AGE = 300
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211'
    }
}

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    # 'DEFAULT_AUTHENTICATION_CLASSES': (
    #     'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    #     'rest_framework_social_oauth2.authentication.SocialAuthentication',
    # ),

    'DATE_FORMAT': '%Y-%m-%d',
    'DATE_INPUT_FORMATS': ('%Y-%m-%d',),

    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    'DATETIME_INPUT_FORMATS': ('%Y-%m-%d %H:%M:%S',),

    'TIME_FORMAT': '%H:%M:%S',
    'TIME_INPUT_FORMATS': ('%H:%M:%S',),
}


REST_FRAMEWORK_EXTENSIONS = {
    'DEFAULT_OBJECT_CACHE_KEY_FUNC':
        'rest_framework_extensions.utils.default_object_cache_key_func',
    'DEFAULT_LIST_CACHE_KEY_FUNC':
        'rest_framework_extensions.utils.default_list_cache_key_func',
    # DRF的缓存时间设置
    'DEFAULT_CACHE_RESPONSE_TIMEOUT': 60 * 1
}


HAYSTACK_CONNECTIONS = {
    'default': {
        # 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        'ENGINE': 'blog.whoosh_cn_backend.WhooshEngine',  # 选择语言解析器为自己更换的结巴分词
        'PATH': os.path.join(os.path.dirname(__file__), 'whoosh_index'),
    },
}

# 自动更新索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

HAYSTACK_SEARCH_RESULTS_PER_PAGE = 5

# AUTHENTICATION_BACKENDS = (
#    'rest_framework_social_oauth2.backends.DjangoOAuth2',
#    'django.contrib.auth.backends.ModelBackend',
# )


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

SITE_NAME = '累兰羽博客'
SITE_URL = 'http://www.zhanxiangyu.xyz'
SITE_SEO_DESCRIPTION = '小站主要用来分享和记录学习经验,记录个人生活的点滴以及一些随笔.'
SITE_SEO_KEYWORDS = 'linux,nginx,uwsgi,mysql,服务器,ubuntu,centos,shell,web,python,django'
ADMIN_URL = PRIVATE_JSON['ADMIN_URL']

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

# USE_TZ = True

USE_TZ = False  # 当数据库查找不到时间的时候修改


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATICFILES = os.path.join(BASE_DIR, 'static')
STATIC_ROOT = os.path.join(BASE_DIR, 'collectedstatic')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static")
]

MEDIA_URL = '/uploads/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')


LOGGING = {
    'version': 1,  # 指明dictConnfig的版本，目前就只有一个版本
    'disable_existing_loggers': False,  # 禁用所有已经存在的日志配置
    'formatters': {  # 格式器
        'standard': {
            'format': '%(levelname)s %(asctime)s [%(module)s, %(funcName)s] - %(message)s'  # 日志输出格式
        },
        'simple': {
            'format': '%(levelname)s %(message)s'  # 日志输出格式
        },
    },
    # 'filters': {  # 过滤器
    #     'special': {  # 使用project.logging.SpecialFilter， 别名special, 可以接受其他参数
    #         '()': 'project.logging.SpecialFilter',
    #         'foo': 'bar',  # 参数 名为foo， 值为bar
    #     }
    # },

    'handlers': {  # 处理器
        'console': {
            'class': 'logging.StreamHandler',  # 控制台输出处理
        },
        'logfile': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'log/log.log'),  # 日志输出文件
            'formatter': 'standard',  # 使用哪种formatters格式进行打印
            'maxBytes': 10 * 1024 *1024,  # 文件大小
            'backupCount': 10,  # 备份份数
        },
        'mail_admin': {  # 该处理器，所有高于（包括）error的消息会被发送给站点管理员
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': False,
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admin'],
            'propagate': True,  # 是否继承父类信息
            'level': 'ERROR',
        },
        # 'django': {
        #     'handlers': ['console', 'logfile'],
        #     'propagate': False,
        #     'level': 'INFO'
        # }
    },
    'root': {
        'level': 'INFO',
        'handlers': ['console', 'logfile']
    },
}